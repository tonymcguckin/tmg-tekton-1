---
apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: dct-init
spec:
  params:
    - name: api-key
      description: The IBM Cloud API key is used to access the IBM Cloud Kubernetes
        Service API and interact with the cluster. You can obtain your API key with
        'ic iam api-key-create' or via the console at https://cloud.ibm.com/iam#/apikeys
        by clicking **Create API key** (Each API key only can be viewed once).
    - name: app-name
      description: The name of your app
    - name: vault-name
      description: the key protect instance name
    - name: region
      description: target region
    - name: cluster-name
      description: the name of the targeted cluster
    - name: registry-namespace
      description: The registry namespace
    - name: registry-region
      description: the registry region
    - name: resource-group
      description: the resource group
    - name: validation-signer
      description: current signer
    - name: working-dir
      default: "/root"
    - name: api-endpoint
      description: api endpoint
      default: https://cloud.ibm.com
    - name: mount-path
      description: mount path directory
      default: /artifacts
    - name: pipeline-debug
      description: Pipeline debug mode
      default: "0"

  stepTemplate:
    env:
      - name: PIPELINE_DEBUG
        value: $(params.pipeline-debug)

  steps:
    - name: create-dct-keys
      image: ibmcom/pipeline-base-image:2.6
      env:
        - name: IBM_CLOUD_API_KEY
          value: $(params.api-key)
        - name: IMAGE_NAME
          value: $(params.app-name)
        - name: API
          value: $(params.api-endpoint)
        - name: VAULT_INSTANCE
          value: $(params.vault-name)
        - name: IBMCLOUD_TARGET_REGION
          value: $(params.region)
        - name: BUILD_CLUSTER
          value: $(params.cluster-name)
        - name: REGISTRY_NAMESPACE
          value: $(params.registry-namespace)
        - name: REGISTRY_REGION
          value: $(params.registry-region)
        - name: IBMCLOUD_TARGET_RESOURCE_GROUP
          value: $(params.resource-group)
        - name: ARCHIVE_DIR
          value: $(params.mount-path)
        - name: HOME
          value: $(params.working-dir)
        - name: DEVOPS_VALIDATION_SIGNER
          value: $(params.validation-signer)
      command: ["/bin/bash", "-c"]
      workingDir: /artifacts
      # yamllint disable rule:line-length
      args:
        - |
          set -e -o pipefail

          if [[ $PIPELINE_DEBUG == 1 ]]; then
            pwd
            env
            trap env EXIT
            set -x
          fi

          source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/add_docker.sh")
          # Get the notary binary
          curl -L https://github.com/theupdateframework/notary/releases/download/v0.6.1/notary-Linux-amd64 -o /usr/local/bin/notary
          # Make it executable
          chmod +x /usr/local/bin/notary

          export IBMCLOUD_API_KEY=$IBM_CLOUD_API_KEY
          export DOCKER_CONTENT_TRUST=1

          # Setup Docker-In-Docker
          source <(curl -s -S -L "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/setup_dind.sh")

          # configure the container registry
          echo "REGISTRY REGION $REGISTRY_REGION"
          export REGISTRY_REGION=$(echo "$REGISTRY_REGION" | awk -F ':' '{print $NF;}')
          ibmcloud cr region-set $REGISTRY_REGION
          echo "REGISTRY REGION $REGISTRY_REGION"

          # login docker to ibm container registry
          ibmcloud cr login

          # check the existence of the container registry namespace
          REGISTRY_URL=$(ibmcloud cr info | grep -m1 -i '^Container Registry' | awk '{print $3;}')
          echo "Check for $REGISTRY_NAMESPACE existence"
          if ibmcloud cr namespaces | tail --lines=+4 | head --lines=-2 | grep "^$REGISTRY_NAMESPACE"; then
            echo "$REGISTRY_NAMESPACE exists in $REGISTRY_URL"
          else
            echo "Creating REGISTRY_NAMESPACE in $REGISTRY_URL"
            ibmcloud cr namespace-add $REGISTRY_NAMESPACE
          fi

          export GUN="$REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
          source <(curl -s -S -L "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/check_signers.sh")
          source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/signing_utils.sh")
          if [ $(findTrustData "$GUN") == "false" ]; then
            echo "NO TRUST DATA FOUND"
            # Initialize the repository for Docker Content Trust
            # Generate passphrase for root and repository keys
            # see https://docs.docker.com/engine/security/trust/trust_key_mng/#choose-a-passphrase
            if [ -z "$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE" ]; then
              export DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE=$(openssl rand -base64 16)
            fi
            if [ -z "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE" ]; then
              export DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE=$(openssl rand -base64 16)
            fi
            echo "Doing Docker Content Trust initialization for GUN $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"

            source <(curl -s -S -L "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/notary_init_gun.sh")

            echo "Backing-up keys in $VAULT_INSTANCE"
            # jsonify the Vault access values
            VAULT_DATA=$(buildVaultAccessDetailsJSON "$VAULT_INSTANCE" "$IBMCLOUD_TARGET_REGION" "$IBMCLOUD_TARGET_RESOURCE_GROUP")
            JSON_DATA="$(readData "$REGISTRY_NAMESPACE.$IMAGE_NAME.keys" "$VAULT_DATA")"
            #save the root, repo pem key files to the Vault
            JSON_ROOT_DATA=$(addTrustFileToJSON "root" "$JSON_ROOT_DATA" "$DOCKER_CONTENT_TRUST_ROOT_PASSPHRASE")
            JSON_ROOT_DATA=$(addTrustFileToJSON "target" "$JSON_ROOT_DATA" "$DOCKER_CONTENT_TRUST_REPOSITORY_PASSPHRASE")
            deleteSecret "$REGISTRY_NAMESPACE.$IMAGE_NAME.repokeys" "$VAULT_DATA"
            saveData "$REGISTRY_NAMESPACE.$IMAGE_NAME.repokeys" "$VAULT_DATA" "$JSON_ROOT_DATA"
          else
          #
          echo "No op"

          fi

          echo "Create signer $DEVOPS_SIGNER for $REGISTRY_URL/$REGISTRY_NAMESPACE/$IMAGE_NAME"
          echo "Building signer list"
          #signerList=("$DEVOPS_BUILD_SIGNER" "$DEVOPS_VALIDATION_SIGNER")
          #for i in "${signerList[@]}"; do
          #DEVOPS_SIGNER=$i
          DEVOPS_SIGNER=$DEVOPS_VALIDATION_SIGNER
          # Restore root & repository keys
          echo "Restoring keys from $VAULT_INSTANCE"
          source <(curl -sSL "https://raw.githubusercontent.com/open-toolchain/commons/master/scripts/image_signing/add_signer.sh")
          #done
      # yamllint enable rule:line-length

  workspaces:
    - name: artifacts
      # mountPath: $(params.mount-path)
      mountPath: /artifacts
